# This is a basic workflow to help you get started with Actions

name: Check for update

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  schedule:
    - cron: '5 4 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  diff:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      docs_changed: ${{ steps.check_file_changed.outputs.compose_changed }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Compare docker-compose.yml
        run: |
          if ! curl -sLo- https://goauthentik.io/docker-compose.yml \
              | diff docker-compose.yml - ; then
            echo 'changed=true' | tee -a "$GITHUB_OUTPUT"
          fi

  # Run the job only with "compose_changed" equals "true"
  branch-and-pr:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: diff
    if: needs.diff.outputs.changed == 'true'
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set environments
        run: echo "NEW_BRANCH=update-config-$(date +%Y-%m-%d_%H%M%S-utc)" >> $GITHUB_ENV
      - name: Configure git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      - name: Commit
        run: git commit -a -m "Update config.json by ${GITHUB_ACTOR}"
      - name: Git push
        run: git push origin HEAD:${NEW_BRANCH}
      - name: Create Pull Request
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.pulls.create({
              ...context.repo,
              title: '${{ env.NEW_BRANCH }}',
              body: `Created by \`${ process.env.GITHUB_ACTOR }\``,
              head: '${{ env.NEW_BRANCH }}',
              base: 'master'
            })
